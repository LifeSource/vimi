# ---------------------------------------------
# JavaScript ES5
# ---------------------------------------------
snippet clg
	console.log(${1:});${0}
# ---------------------------------------------
# Object, Constants and Variable  Creation
# ---------------------------------------------
snippet vv
	var ${1} = ${2};

snippet vr
	var ${1} = [${2}];

snippet vb
	var ${1} = {
		${0}
	};

snippet vlet
	let ${1} = ${0};

snippet vconst
	const ${1} = ${0};

# ---------------------------------------------
# Conditional
# ---------------------------------------------
snippet ife
	if (${1}) {
		${2}
	} else if (${3}) {
		${4}
	} else {
		${0}
	}

# ---------------------------------------------
# Functions, IIFE
# ---------------------------------------------
snippet f)
	function (${1}) {
		${0}
	});
snippet	f;
	function (${1}) {
		${0}
	};
snippet	f,
	function (${1}) {
		${0}
	},
snippet fn
	function ${1}(${2}) {
		${0}
	}
snippet pfn
	${1} : function ${2}(${3}) {
		${0}
	}
snippet iife
	(function (${2}) {
		'use strict';
		${0}
	})(${1});
# ---------------------------------------------
# JavaScript ES6
# ---------------------------------------------

# ES6 function
snippet efn
	${1}(${2}) {
		${0}
	}
snippet 6f
	${1}(${2}) {
		${0}
	}
# Constructor
snippet ctr
	constructor() {
		${0}
	}
snippet ctor
	constructor() {
		${0}
	}
# Class
snippet cls
	export class ${1} {
		constructor() {
		}
		${0}
	}
snippet clse
	export class ${1} extends ${2} {
		constructor() {
		}
		${0}
	}
# Arrow Function
snippet ->
	(${1}) => ${0}
# promise
snippet prm
	return ${1}
		.then((${2}) => {
			${3}
		})
		.catch((${4}) => {
			${5}	
		});${0}
snippet prm{
	return ${1}
		.then(${2} => ${3})
		.catch((${4}) => ${5});${0}
# modules (imports and exports)
snippet vimp
	import ${1} from '${2}';${0}
snippet vimp{
	import { ${1} } from '${2}';${0}
snippet exp
	export ${0}
snippet xd 
	export default ${1};${0}
snippet obja
	Object.assign({}, ${1}, ${0});

# ------------------------------
# Typescript syntax snippets
# ------------------------------
snippet tprop
	${1}: ${2}
snippet tfn
	${1} (): ${2:void} {
		${0}
	}
snippet tctor
	constructor(${1}: ${2:_typeName}) {
	}
snippet timp
	import { ${1} } from '${2}'${0}
# ------------------------------
# Angular 2 snippets
# ------------------------------

# Module
snippet ngmod
	import { NgModule } from '@angular/core'

	@NgModule({
		imports: [],
		exports: [],
		declarations: []
	})
	export class ${1}Module {
	}$2
# Component
snippet ngcomp
	import { Component } from '@angular/core'

	@Component({
		selector: '',
		templateUrl: '',
		styleUrls: []
	})
	export class ${1}Component {
		${0}
	}
# Service
snippet ngserv
	import { Injectable } from '@angular/core'
	import { Http } from '@angular/http'

	@Injectable()
	export class ${1}Service {
		constructor(private http: Http) {
		}
	}
# --------------------------------------
# Test Suites
# --------------------------------------
snippet suite5
	describe('${1}', function() {
		beforeEach(function() {

		});

		afterEach(function() {

		});
		${0}
	});

snippet suite
	describe('${1}', () => {

		beforeEach(() => {

		});

		afterEach(() => {

		});

		${0}
	});
# --------------------------------------
# Test setup describe, it, beforeEach, afterEach
# --------------------------------------
snippet desc5
	describe('${1}', function() {
		${0}
	});
snippet desc
	describe('${1}', () => {
		${0}
	});
snippet it5
	it('${1}', function() {
		${0}
	});
snippet it
	it('${1}', () => {
		${0}
	});
snippet bef5
	beforeEach(function() {
		${0}
	});
snippet bef
	beforeEach(() => {
		${0}
	});
snippet aft5
	afterEach(function() {
		${0}
	});
snippet aft
	afterEach(() => {
		${0}
	});
# --------------------------------------
# Chai Asserts (TDD style)
# --------------------------------------
snippet ashould
	assert(${1}).should.${2};

# --------------------------------------
# Chai Assertions (BDD style)
# --------------------------------------

# --------------------------------------
# Expect
# --------------------------------------
snippet eex
	expect(${1}).to.exist;${0}
snippet eeq
	expect(${1}).to.equal(${2});${0}
snippet ebe
	expect(${1}).to.be.a(${2});${0}
snippet elen
	expect(${1}).to.have.length(${2});${0}

# --------------------------------------
# Should
# --------------------------------------
snippet sex
	${1}.should.exist;
snippet !sex 
	${1}.should.not.exist;
snippet sbe 
	${1}.should.be.a(${2});${0}
snippet seq
	${1}.should.equal(${2});${0}
snippet slen
	${1}.should.have.length(${2});${0}
snippet slaba
	${1}.should.have.length.above(${2});${0}
